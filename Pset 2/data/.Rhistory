# ********* YOUR CODE BELOW HERE ***********
for (i in data_rolls){
}
cat('See plots\n')
}
# Problem 1c: Compare and contrast. ----
studio5_problem_1c = function() {
cat("-----\n")
cat("1c. Compare and contrast.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You need to put your answer here.\n")
}
# Problem 1d: Too certain a prior. ----
studio5_problem_1d = function() {
cat("-----\n")
cat("1d. Too certain a prior.\n")
# Prior probability of D8 = 0
prior = c(0.25, 0.25, 0, 0.25, 0.25)
cat('Running studio5_problem_1b\n')
studio5_problem_1b(prior, 20, FALSE)
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You should put your answer here\n")
}
# Problem 2a (OPTIONAL): List hypotheses, make likelihood table
studio5_problem_2a = function() {
cat("\n----------------------------------\n")
cat("OPTIONAL 2a. List hypotheses, outcomes, make likelihood table.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
}
# Problem 2b (OPTIONAL): Censored data. ----
studio5_problem_2b = function(prior, nrolls) {
cat("-----\n")
cat("OPTIONAL 2b: Censored data.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat('See plots\n')
}
# Studio 5 ----
# 1. Be sure to read the instructions file!
# 2. The instruction file gives instructions for testing your code. You can see the output of the tests in studio5-test-answers.html. You should use this to verify your code is giving correct output in the format asked for.
# 3. The handouts section (right side) of our MITx course page has a link for uploading you work.
#--------------------------------------
# Setup ----
# We have five types of dice: 4, 6, 8, 12, 20 sided.
# There is a prior distribution of the quantity of each die.
# One die is chosen at random and rolled repeatedly.
# Our job is to figure out which type of die was chosen.
DICE = c(4,6,8,12,20) # Fixed for the entire studio
DICE_TYPES = c('D4', 'D6', 'D8', 'D12', 'D20')
#-------------------------------
# Problem 0: List hypotheses and outcomes. ----
# See the instructions for this studio.
# 0a: List hypotheses.
studio5_problem_0a = function() {
cat("\n----------------------------------\n")
cat("Problem 0a: List hypotheses.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("H(D4) = 1/5")
print("H(D6) = 1/5")
print("H(D8) = 1/5")
print("H(D12) = 1/5")
print("H(D20) = 1/5")
}
# 0b: List outcomes.
studio5_problem_0b = function() {
cat("-----\n")
cat("0b. List outcomes.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print('if:')
print("D4: 1,2,3,4")
print("D6: 1,2,3,4,5,6")
print("D8: 1,2,3,4,5,6,7,8")
print("D12: 1,2,3,4,5,6,7,8,9,10,11,12")
print("D20: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
}
# 0c: Print likelihood table for one roll. ----
studio5_problem_0c = function() {
cat("-----\n")
cat("0c. Print likelihood table for one roll.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("
[
[1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0],
[1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0],
[1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,]
]]")
}
#---------------------------
# Problem 1: Updating ----
# 1a: Run studio5_sample_code_example_2.
studio5_problem_1a = function() {
cat("\n----------------------------------\n")
cat("Problem 1a. Run example 2.\n")
# Nothing more to do.
cat("Read the code and looked at the plots.\n")
}
# Problem 1b: Updates, bar plots, stacked bar plot.
studio5_problem_1b = function(prior,
nrolls,
plot_individual_posteriors=FALSE) {
cat("-----\n")
cat("1b. Updates, bar plots, stacked bar plot.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
#  plot_individual_posteriors = whether or not to make individual bar charts
# For this problem force the chosen die to be 8-sided
random_die = 8
data_rolls = sample(1:random_die, size=nrolls, replace=TRUE)
cat('The initial prior is\n')
print(prior, digits=4)
cat('nrolls =', nrolls, '\n')
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
for (i in data_rolls){
}
cat('See plots\n')
}
# Problem 1c: Compare and contrast. ----
studio5_problem_1c = function() {
cat("-----\n")
cat("1c. Compare and contrast.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You need to put your answer here.\n")
}
# Problem 1d: Too certain a prior. ----
studio5_problem_1d = function() {
cat("-----\n")
cat("1d. Too certain a prior.\n")
# Prior probability of D8 = 0
prior = c(0.25, 0.25, 0, 0.25, 0.25)
cat('Running studio5_problem_1b\n')
studio5_problem_1b(prior, 20, FALSE)
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You should put your answer here\n")
}
#---------------------------
# Problem 2 (OPTIONAL): Censored data. ----
# Problem 2a (OPTIONAL): List hypotheses, make likelihood table
studio5_problem_2a = function() {
cat("\n----------------------------------\n")
cat("OPTIONAL 2a. List hypotheses, outcomes, make likelihood table.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
}
# Problem 2b (OPTIONAL): Censored data. ----
studio5_problem_2b = function(prior, nrolls) {
cat("-----\n")
cat("OPTIONAL 2b: Censored data.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat('See plots\n')
}
# Studio 5 ----
# 1. Be sure to read the instructions file!
# 2. The instruction file gives instructions for testing your code. You can see the output of the tests in studio5-test-answers.html. You should use this to verify your code is giving correct output in the format asked for.
# 3. The handouts section (right side) of our MITx course page has a link for uploading you work.
#--------------------------------------
# Setup ----
# We have five types of dice: 4, 6, 8, 12, 20 sided.
# There is a prior distribution of the quantity of each die.
# One die is chosen at random and rolled repeatedly.
# Our job is to figure out which type of die was chosen.
DICE = c(4,6,8,12,20) # Fixed for the entire studio
DICE_TYPES = c('D4', 'D6', 'D8', 'D12', 'D20')
#-------------------------------
# Problem 0: List hypotheses and outcomes. ----
# See the instructions for this studio.
# 0a: List hypotheses.
studio5_problem_0a = function() {
cat("\n----------------------------------\n")
cat("Problem 0a: List hypotheses.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("H(D4) = 1/5")
print("H(D6) = 1/5")
print("H(D8) = 1/5")
print("H(D12) = 1/5")
print("H(D20) = 1/5")
}
# 0b: List outcomes.
studio5_problem_0b = function() {
cat("-----\n")
cat("0b. List outcomes.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print('if:')
print("D4: 1,2,3,4")
print("D6: 1,2,3,4,5,6")
print("D8: 1,2,3,4,5,6,7,8")
print("D12: 1,2,3,4,5,6,7,8,9,10,11,12")
print("D20: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
}
# 0c: Print likelihood table for one roll. ----
studio5_problem_0c = function() {
cat("-----\n")
cat("0c. Print likelihood table for one roll.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("
[
[1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0],
[1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0],
[1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,]
]]")
}
#---------------------------
# Problem 1: Updating ----
# 1a: Run studio5_sample_code_example_2.
studio5_problem_1a = function() {
cat("\n----------------------------------\n")
cat("Problem 1a. Run example 2.\n")
# Nothing more to do.
cat("Read the code and looked at the plots.\n")
}
# Problem 1b: Updates, bar plots, stacked bar plot.
studio5_problem_1b = function(prior,
nrolls,
plot_individual_posteriors=FALSE) {
cat("-----\n")
cat("1b. Updates, bar plots, stacked bar plot.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
#  plot_individual_posteriors = whether or not to make individual bar charts
# For this problem force the chosen die to be 8-sided
random_die = 8
data_rolls = sample(1:random_die, size=nrolls, replace=TRUE)
cat('The initial prior is\n')
print(prior, digits=4)
cat('nrolls =', nrolls, '\n')
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
for (i in data_rolls){
}
cat('See plots\n')
}
# Problem 1c: Compare and contrast. ----
studio5_problem_1c = function() {
cat("-----\n")
cat("1c. Compare and contrast.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You need to put your answer here.\n")
}
# Problem 1d: Too certain a prior. ----
studio5_problem_1d = function() {
cat("-----\n")
cat("1d. Too certain a prior.\n")
# Prior probability of D8 = 0
prior = c(0.25, 0.25, 0, 0.25, 0.25)
cat('Running studio5_problem_1b\n')
studio5_problem_1b(prior, 20, FALSE)
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You should put your answer here\n")
}
#---------------------------
# Problem 2 (OPTIONAL): Censored data. ----
# Problem 2a (OPTIONAL): List hypotheses, make likelihood table
studio5_problem_2a = function() {
cat("\n----------------------------------\n")
cat("OPTIONAL 2a. List hypotheses, outcomes, make likelihood table.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
}
# Problem 2b (OPTIONAL): Censored data. ----
studio5_problem_2b = function(prior, nrolls) {
cat("-----\n")
cat("OPTIONAL 2b: Censored data.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat('See plots\n')
}
print(888)
for (i in data_rolls){
print(888)
}
print(prior, digits=4)
DICE = c(4,6,8,12,20) # Fixed for the entire studio
DICE_TYPES = c('D4', 'D6', 'D8', 'D12', 'D20')
# 0a: List hypotheses.
studio5_problem_0a = function() {
cat("\n----------------------------------\n")
cat("Problem 0a: List hypotheses.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("H(D4) = 1/5")
print("H(D6) = 1/5")
print("H(D8) = 1/5")
print("H(D12) = 1/5")
print("H(D20) = 1/5")
}
# 0a: List hypotheses.
studio5_problem_0a = function() {
cat("\n----------------------------------\n")
cat("Problem 0a: List hypotheses.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("H(D4) = 1/5")
print("H(D6) = 1/5")
print("H(D8) = 1/5")
print("H(D12) = 1/5")
print("H(D20) = 1/5")
}
# 0b: List outcomes.
studio5_problem_0b = function() {
cat("-----\n")
cat("0b. List outcomes.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print('if:')
print("D4: 1,2,3,4")
print("D6: 1,2,3,4,5,6")
print("D8: 1,2,3,4,5,6,7,8")
print("D12: 1,2,3,4,5,6,7,8,9,10,11,12")
print("D20: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
}
# 0c: Print likelihood table for one roll. ----
studio5_problem_0c = function() {
cat("-----\n")
cat("0c. Print likelihood table for one roll.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("
[
[1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0],
[1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0],
[1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,]
]]")
}
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("
[
[1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0],
[1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0],
[1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,]
]]")
# 0c: Print likelihood table for one roll. ----
studio5_problem_0c = function() {
cat("-----\n")
cat("0c. Print likelihood table for one roll.\n")
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
print("
[
[1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0],
[1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0],
[1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,]
]]")
}
# 1a: Run studio5_sample_code_example_2.
studio5_problem_1a = function() {
cat("\n----------------------------------\n")
cat("Problem 1a. Run example 2.\n")
# Nothing more to do.
cat("Read the code and looked at the plots.\n")
}
# Problem 1b: Updates, bar plots, stacked bar plot.
studio5_problem_1b = function(prior,
nrolls,
plot_individual_posteriors=FALSE) {
cat("-----\n")
cat("1b. Updates, bar plots, stacked bar plot.\n")
# Arguments:
#  prior = prior probilities for the type of die use to generate data
#  nrolls = number of rolls to simulate
#  plot_individual_posteriors = whether or not to make individual bar charts
# For this problem force the chosen die to be 8-sided
random_die = 8
data_rolls = sample(1:random_die, size=nrolls, replace=TRUE)
cat('The initial prior is\n')
print(prior, digits=4)
cat('nrolls =', nrolls, '\n')
# Do not change the above code.
# ********* YOUR CODE BELOW HERE ***********
for (i in data_rolls){
print(888)
}
cat('See plots\n')
}
# Problem 1c: Compare and contrast. ----
studio5_problem_1c = function() {
cat("-----\n")
cat("1c. Compare and contrast.\n")
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You need to put your answer here.\n")
}
# Problem 1d: Too certain a prior. ----
studio5_problem_1d = function() {
cat("-----\n")
cat("1d. Too certain a prior.\n")
# Prior probability of D8 = 0
prior = c(0.25, 0.25, 0, 0.25, 0.25)
cat('Running studio5_problem_1b\n')
studio5_problem_1b(prior, 20, FALSE)
# Do not change the above code.
# ********* YOUR CODE HERE ***********
cat("You should put your answer here\n")
}
print(prior, digits=4)
myMat = matrix(c(1/4,1/4,1/4,1/4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/6,1/6,1/6,1/6,1/6,1/6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8,0,0,0,0,0,0,0,0,0,0,0,0,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,0,0,0,0,0,0,0,0,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20,1/20), nrow = 5, ncol = 20)
# Studio 7  ----
# 1. Be sure to read the instructions file!
# 2. The test answers file gives sample output and the functions we ran to get it. You should use this to verify your code is giving correct output in the format asked for.
# 3. The handouts section (right side) of our MITx course page has a link for uploading you work.
#--------------------------------------
# Problem 1: Significance and power/type 1 and type 2 errors
# See instructions for this studio
studio7_problem_1 = function(theta_HA, alpha, n_tosses) {
cat("----------------------------------\n")
cat("Problem 1: Rejection region, actual significance, power\n")
# **** Be careful to avoid an 'off by 1 error' here.
# Arguments:
#   theta_HA = the probability of heads in the alternate hypothesis
#   alpha = significance level for our significance test
#   n_tosess = the number of tosses in one trial
theta_H0 = 0.5 # probability of heads in the null hypothesis
# Enforce theta_HA > theta_H0
if (theta_HA < theta_H0) {
warning("Problem 1: We require theta_HA > theta_H0", immediate.=TRUE)
return()
}
# Do not change the above code.
# ********* YOUR CODE HERE ***********
# Calculate the critical value for the right-sided test
critical_value = qbinom(1 - alpha, n_tosses, theta_H0)
# Determine the rejection region
rejection_region = critical_value + 1
# Calculate the true significance
true_significance = pbinom(critical_value, n_tosses, theta_H0, lower.tail = FALSE)
# Calculate the power
power = pbinom(critical_value, n_tosses, theta_HA, lower.tail = FALSE)
cat("  Rejection region: ", rejection_region,"\n")
cat("  True significance=", true_significance,'\n')
cat("  Power=", power,'\n')
}
# Studio 8  ----
# 1. Be sure to read the instructions file!
# 2. The test answers file gives sample output and the functions we ran to get it. You should use this to verify your code is giving correct output in the format asked for.
# 3. The handouts section (right side) of our MITx course page has a link for uploading you work.
#--------------------------------------
# Summary of questions
# 1. Simulation of the f-statistic: draw histogram and graph
# 2. z-test. Code by hand a z-test
# 3. Chi-square test for independence
# 4. ANOVA. using aov()
#--------------------------------------
# Problem 1: Simulate F statistic
# See instructions for this studio
studio8_problem_1 = function(n, m, mu, sigma, n_trials) {
cat("----------------------------------\n")
cat("Problem 1: Simulate F statistic\n")
# Arguments
# n = number of groups
# m = number of data points in each group (same for all groups)
# mu = common mean: same for each group
# sigma = common standard deviation (same for each group)
# n_trials = number of trials to run in the simulation
# Do not change the above code.
# ********* YOUR CODE HERE ***********
compute_f_stat <- function(groups) {
grand_mean <- mean(unlist(groups))
between_group_variance <- sum(m * (sapply(groups, mean) - grand_mean)^2) / (n - 1)
within_group_variance <- sum(sapply(groups, function(x) sum((x - mean(x))^2))) / (n * (m - 1))
return (between_group_variance / within_group_variance)
}
f_statistics <- numeric(n_trials)
for (i in 1:n_trials) {
groups <- lapply(1:n, function(x) rnorm(m, mean = mu, sd = sigma))
f_statistics[i] <- compute_f_stat(groups)
}
hist_data <- data.frame(f_statistics)
plot <- ggplot(hist_data, aes(x = f_statistics)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = 'blue', alpha = 0.5) +
stat_function(fun = df, args = list(df1 = n - 1, df2 = n * (m - 1)), color = 'red', size = 1) +
theme_minimal() +
labs(title = "F-statistic simulation", x = "F-statistic", y = "Density") +
theme(plot.title = element_text(hjust = 0.5))
print(plot)
cat("See plots\n")
}
studio8_problem_1(n = 5, m = 10, mu = 0, sigma = 1, n_trials = 1000)
